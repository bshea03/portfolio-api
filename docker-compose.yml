services:
  api:
    build: .
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - .env
    environment:
      APP_ENV: ${APP_ENV}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - .:/app
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://127.0.0.1:8000/api/healthchecker || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10

  db:
    image: postgres:15
    restart: always
    env_file:
      - .env
    environment:
      APP_ENV: ${APP_ENV}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 10

  backup:
    build:
      context: ./backup
    depends_on:
      - db
    volumes:
      - pgbackups:/backups

  test-runner:
    profiles:
      - dev
    build: .
    command: pytest
    restart: "no"
    env_file:
      - .env.test
    volumes:
      - .:/app
    depends_on:
      api:
        condition: service_healthy
      db-test:
        condition: service_healthy

  db-test:
    profiles:
      - dev
    image: postgres:15
    restart: always
    env_file:
      - .env.test
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - pgdata_test:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 10



volumes:
  pgdata:
  pgbackups:
  pgdata_test:

